var documenterSearchIndex = {"docs":
[{"location":"#ModelPredictiveControl.jl-Documentation","page":"ModelPredictiveControl.jl Documentation","title":"ModelPredictiveControl.jl Documentation","text":"","category":"section"},{"location":"","page":"ModelPredictiveControl.jl Documentation","title":"ModelPredictiveControl.jl Documentation","text":"LinModel","category":"page"},{"location":"#ModelPredictiveControl.LinModel","page":"ModelPredictiveControl.jl Documentation","title":"ModelPredictiveControl.LinModel","text":"LinModel(sys::StateSpace, Ts::Real; kwargs...)\n\nConstruct a LinModel from state-state model sys.\n\nIf sys is continuous, it is dicretized using c2d and :zoh for manipulated inputs,  and :tustin, for measured disturbances.\n\nArguments\n\nsys::StateSpace: state-space model incl. manipulated inputs and measured disturbances\nTs::Real: model sampling time in second\ni_u::IntRangeOrVector = 1:size(sys,2): index of sys inputs that are    manipulated\ni_d::IntRangeOrVector = Int[]: index of sys inputs that are measured   disturbances\nu_op::Vector{<:Real} = Float64[]: manipulated input operating points\ny_op::Vector{<:Real} = Float64[]: outputs operating points\nd_op::Vector{<:Real} = Float64[]: measured disturbances operating points\n\nExamples\n\njulia> LinModel(tf(3, [10, 1]), 2, u_op=[50], y_op=[20])\nDiscrete-time linear model with a sample time Ts = 2.0 s and:\n- 1 manipulated inputs u\n- 1 states x\n- 1 outputs y\n- 0 measured disturbances d\n\n\n\n\n\nLinModel(sys::TransferFunction, Ts::Real; kwargs...)\n\nConvert to minimal realization state-space when sys is a transfer function.\n\n\n\n\n\n","category":"type"}]
}
